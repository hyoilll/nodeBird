{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport { combinReducers } from \"redux\";\nimport user from \"./user\";\nimport post from \"./post\";\nconst initialState = {\n  user: {},\n  post: {}\n}; // action creator\n\nconst changeNickname = data => {\n  return {\n    type: \"CHANGE_NICKNAME\",\n    data: data\n  };\n}; // changeNickname(\"leehyoil\");\n// {\n//     type:\"CHANGE_NICKNAME\",\n//     data:\"leehyoil\"\n// }\n// (이전상태, 액션) => 다음상태\n\n\nconst rootReducer = combinReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      case \"HYDRATE\":\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        // 맨 처음 reducer 초기화시 default값이 없으면 return undefined가 되기 때문에 적어줌\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/nodeBird/front/reducers/index.js"],"names":["HYDRATE","combinReducers","user","post","initialState","changeNickname","data","type","rootReducer","index","state","action","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,cAAT,QAA+B,OAA/B;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,YAAY,GAAG;AACnBF,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB,C,CAKA;;AACA,MAAME,cAAc,GAAIC,IAAD,IAAU;AAC/B,SAAO;AACLC,IAAAA,IAAI,EAAE,iBADD;AAELD,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALD,C,CAOA;AACA;AACA;AACA;AACA;AAEA;;;AACA,MAAME,WAAW,GAAGP,cAAc,CAAC;AACjCQ,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACJ,IAAf;AACE,WAAK,SAAL;AACE,+CAAYG,KAAZ,GAAsBC,MAAM,CAACC,OAA7B;;AAEF;AACE;AACA,eAAOF,KAAP;AANJ;AAQD,GAVgC;AAWjCR,EAAAA,IAXiC;AAYjCC,EAAAA;AAZiC,CAAD,CAAlC;AAeA,eAAeK,WAAf","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\nimport { combinReducers } from \"redux\";\r\n\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\n\r\nconst initialState = {\r\n  user: {},\r\n  post: {},\r\n};\r\n\r\n// action creator\r\nconst changeNickname = (data) => {\r\n  return {\r\n    type: \"CHANGE_NICKNAME\",\r\n    data: data,\r\n  };\r\n};\r\n\r\n// changeNickname(\"leehyoil\");\r\n// {\r\n//     type:\"CHANGE_NICKNAME\",\r\n//     data:\"leehyoil\"\r\n// }\r\n\r\n// (이전상태, 액션) => 다음상태\r\nconst rootReducer = combinReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"HYDRATE\":\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        // 맨 처음 reducer 초기화시 default값이 없으면 return undefined가 되기 때문에 적어줌\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}